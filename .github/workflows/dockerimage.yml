name: Docker Image
on:
  push:
    branches:
      - master
  schedule:
    - cron: '3 1 1/3 * *'
env:
  OPENSSH_VERSION: openssh-8.2p1
  OPENSSH_MATCH: remote software version OpenSSH_8.2
  IMAGE_REPO: bitnp/gitlab-ce

jobs:
  testpub:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: |
        docker pull gitlab/gitlab-ce:latest
        docker build . --file Dockerfile --build-arg OPENSSH_VERSION=$OPENSSH_VERSION --tag $IMAGE_REPO:latest
    - name: Test SSH version
      run: |
        docker run -d --name test $IMAGE_REPO:latest
        sleep 10
        export GITLAB_RELEASE_VERSION=$(docker exec test cat /RELEASE|grep -oP "RELEASE_VERSION=\K(.+)(?=-)")
        echo $GITLAB_RELEASE_VERSION
        # tag
        docker tag $IMAGE_REPO:latest $IMAGE_REPO:$GITLAB_RELEASE_VERSION
        # we use nonexisting to sign in intentionally - we don't want to go through the login process
        # because we just need the version info
        if docker ps -a | grep test | grep "Stop\|Restart\|Exit"; then docker logs test;exit 1; fi
        export TEST_DOCKER_IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test`
        if ! docker exec test ssh -v nonexisting@127.0.0.1 2>&1 | grep "${OPENSSH_MATCH}"; then docker ps && docker logs test;exit 1; fi
    - name: Publish to Registry
      env: # Or as an environment variable
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        cat $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
        docker push ${{ env.IMAGE_REPO }}:latest
        docker push ${{ env.IMAGE_REPO }}:${{ env.GITLAB_RELEASE_VERSION }}
